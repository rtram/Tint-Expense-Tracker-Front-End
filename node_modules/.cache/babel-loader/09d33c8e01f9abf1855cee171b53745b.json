{"ast":null,"code":"\"use strict\";\n\nvar _get = require(\"babel-runtime/helpers/get\")[\"default\"];\n\nvar _inherits = require(\"babel-runtime/helpers/inherits\")[\"default\"];\n\nvar _createClass = require(\"babel-runtime/helpers/create-class\")[\"default\"];\n\nvar _classCallCheck = require(\"babel-runtime/helpers/class-call-check\")[\"default\"];\n\nvar _extends = require(\"babel-runtime/helpers/extends\")[\"default\"];\n\nvar _interopRequireDefault = require(\"babel-runtime/helpers/interop-require-default\")[\"default\"];\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _moment = require(\"moment\");\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _classnames = require(\"classnames\");\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _DateTimePickerJs = require(\"./DateTimePicker.js\");\n\nvar _DateTimePickerJs2 = _interopRequireDefault(_DateTimePickerJs);\n\nvar _ConstantsJs = require(\"./Constants.js\");\n\nvar _ConstantsJs2 = _interopRequireDefault(_ConstantsJs);\n\nvar DateTimeField = function (_Component) {\n  _inherits(DateTimeField, _Component);\n\n  function DateTimeField() {\n    var _this = this;\n\n    _classCallCheck(this, DateTimeField);\n\n    _get(Object.getPrototypeOf(DateTimeField.prototype), \"constructor\", this).apply(this, arguments);\n\n    this.resolvePropsInputFormat = function () {\n      if (_this.props.inputFormat) {\n        return _this.props.inputFormat;\n      }\n\n      switch (_this.props.mode) {\n        case _ConstantsJs2[\"default\"].MODE_TIME:\n          return \"h:mm A\";\n\n        case _ConstantsJs2[\"default\"].MODE_DATE:\n          return \"MM/DD/YY\";\n\n        default:\n          return \"MM/DD/YY h:mm A\";\n      }\n    };\n\n    this.state = {\n      showDatePicker: this.props.mode !== _ConstantsJs2[\"default\"].MODE_TIME,\n      showTimePicker: this.props.mode === _ConstantsJs2[\"default\"].MODE_TIME,\n      inputFormat: this.resolvePropsInputFormat(),\n      buttonIcon: this.props.mode === _ConstantsJs2[\"default\"].MODE_TIME ? \"glyphicon-time\" : \"glyphicon-calendar\",\n      widgetStyle: {\n        display: \"block\",\n        position: \"absolute\",\n        left: -9999,\n        zIndex: \"9999 !important\"\n      },\n      viewDate: (0, _moment2[\"default\"])(this.props.dateTime, this.props.format, true).startOf(\"month\"),\n      selectedDate: (0, _moment2[\"default\"])(this.props.dateTime, this.props.format, true),\n      inputValue: typeof this.props.defaultText !== \"undefined\" ? this.props.defaultText : (0, _moment2[\"default\"])(this.props.dateTime, this.props.format, true).format(this.resolvePropsInputFormat())\n    };\n\n    this.componentWillReceiveProps = function (nextProps) {\n      var state = {};\n\n      if (nextProps.inputFormat !== _this.props.inputFormat) {\n        state.inputFormat = nextProps.inputFormat;\n        state.inputValue = (0, _moment2[\"default\"])(nextProps.dateTime, nextProps.format, true).format(nextProps.inputFormat);\n      }\n\n      if (nextProps.dateTime !== _this.props.dateTime && (0, _moment2[\"default\"])(nextProps.dateTime, nextProps.format, true).isValid()) {\n        state.viewDate = (0, _moment2[\"default\"])(nextProps.dateTime, nextProps.format, true).startOf(\"month\");\n        state.selectedDate = (0, _moment2[\"default\"])(nextProps.dateTime, nextProps.format, true);\n        state.inputValue = (0, _moment2[\"default\"])(nextProps.dateTime, nextProps.format, true).format(nextProps.inputFormat ? nextProps.inputFormat : _this.state.inputFormat);\n      }\n\n      return _this.setState(state);\n    };\n\n    this.onChange = function (event) {\n      var value = event.target == null ? event : event.target.value;\n\n      if ((0, _moment2[\"default\"])(value, _this.state.inputFormat, true).isValid()) {\n        _this.setState({\n          selectedDate: (0, _moment2[\"default\"])(value, _this.state.inputFormat, true),\n          viewDate: (0, _moment2[\"default\"])(value, _this.state.inputFormat, true).startOf(\"month\")\n        });\n      }\n\n      return _this.setState({\n        inputValue: value\n      }, function () {\n        return this.props.onChange((0, _moment2[\"default\"])(this.state.inputValue, this.state.inputFormat, true).format(this.props.format), value);\n      });\n    };\n\n    this.getValue = function () {\n      return (0, _moment2[\"default\"])(_this.state.inputValue, _this.props.inputFormat, true).format(_this.props.format);\n    };\n\n    this.setSelectedDate = function (e) {\n      var target = e.target;\n\n      if (target.className && !target.className.match(/disabled/g)) {\n        var month = undefined;\n        if (target.className.indexOf(\"new\") >= 0) month = _this.state.viewDate.month() + 1;else if (target.className.indexOf(\"old\") >= 0) month = _this.state.viewDate.month() - 1;else month = _this.state.viewDate.month();\n        return _this.setState({\n          selectedDate: _this.state.viewDate.clone().month(month).date(parseInt(e.target.innerHTML)).hour(_this.state.selectedDate.hours()).minute(_this.state.selectedDate.minutes())\n        }, function () {\n          this.closePicker();\n          this.props.onChange(this.state.selectedDate.format(this.props.format));\n          return this.setState({\n            inputValue: this.state.selectedDate.format(this.state.inputFormat)\n          });\n        });\n      }\n    };\n\n    this.setSelectedHour = function (e) {\n      return _this.setState({\n        selectedDate: _this.state.selectedDate.clone().hour(parseInt(e.target.innerHTML)).minute(_this.state.selectedDate.minutes())\n      }, function () {\n        this.closePicker();\n        this.props.onChange(this.state.selectedDate.format(this.props.format));\n        return this.setState({\n          inputValue: this.state.selectedDate.format(this.state.inputFormat)\n        });\n      });\n    };\n\n    this.setSelectedMinute = function (e) {\n      return _this.setState({\n        selectedDate: _this.state.selectedDate.clone().hour(_this.state.selectedDate.hours()).minute(parseInt(e.target.innerHTML))\n      }, function () {\n        this.closePicker();\n        this.props.onChange(this.state.selectedDate.format(this.props.format));\n        return this.setState({\n          inputValue: this.state.selectedDate.format(this.state.inputFormat)\n        });\n      });\n    };\n\n    this.setViewMonth = function (month) {\n      return _this.setState({\n        viewDate: _this.state.viewDate.clone().month(month)\n      });\n    };\n\n    this.setViewYear = function (year) {\n      return _this.setState({\n        viewDate: _this.state.viewDate.clone().year(year)\n      });\n    };\n\n    this.addMinute = function () {\n      return _this.setState({\n        selectedDate: _this.state.selectedDate.clone().add(1, \"minutes\")\n      }, function () {\n        this.props.onChange(this.state.selectedDate.format(this.props.format));\n        return this.setState({\n          inputValue: this.state.selectedDate.format(this.resolvePropsInputFormat())\n        });\n      });\n    };\n\n    this.addHour = function () {\n      return _this.setState({\n        selectedDate: _this.state.selectedDate.clone().add(1, \"hours\")\n      }, function () {\n        this.props.onChange(this.state.selectedDate.format(this.props.format));\n        return this.setState({\n          inputValue: this.state.selectedDate.format(this.resolvePropsInputFormat())\n        });\n      });\n    };\n\n    this.addMonth = function () {\n      return _this.setState({\n        viewDate: _this.state.viewDate.add(1, \"months\")\n      });\n    };\n\n    this.addYear = function () {\n      return _this.setState({\n        viewDate: _this.state.viewDate.add(1, \"years\")\n      });\n    };\n\n    this.addDecade = function () {\n      return _this.setState({\n        viewDate: _this.state.viewDate.add(10, \"years\")\n      });\n    };\n\n    this.subtractMinute = function () {\n      return _this.setState({\n        selectedDate: _this.state.selectedDate.clone().subtract(1, \"minutes\")\n      }, function () {\n        _this.props.onChange(_this.state.selectedDate.format(_this.props.format));\n\n        return _this.setState({\n          inputValue: _this.state.selectedDate.format(_this.resolvePropsInputFormat())\n        });\n      });\n    };\n\n    this.subtractHour = function () {\n      return _this.setState({\n        selectedDate: _this.state.selectedDate.clone().subtract(1, \"hours\")\n      }, function () {\n        _this.props.onChange(_this.state.selectedDate.format(_this.props.format));\n\n        return _this.setState({\n          inputValue: _this.state.selectedDate.format(_this.resolvePropsInputFormat())\n        });\n      });\n    };\n\n    this.subtractMonth = function () {\n      return _this.setState({\n        viewDate: _this.state.viewDate.subtract(1, \"months\")\n      });\n    };\n\n    this.subtractYear = function () {\n      return _this.setState({\n        viewDate: _this.state.viewDate.subtract(1, \"years\")\n      });\n    };\n\n    this.subtractDecade = function () {\n      return _this.setState({\n        viewDate: _this.state.viewDate.subtract(10, \"years\")\n      });\n    };\n\n    this.togglePeriod = function () {\n      if (_this.state.selectedDate.hour() > 12) {\n        return _this.onChange(_this.state.selectedDate.clone().subtract(12, \"hours\").format(_this.state.inputFormat));\n      } else {\n        return _this.onChange(_this.state.selectedDate.clone().add(12, \"hours\").format(_this.state.inputFormat));\n      }\n    };\n\n    this.togglePicker = function () {\n      return _this.setState({\n        showDatePicker: !_this.state.showDatePicker,\n        showTimePicker: !_this.state.showTimePicker\n      });\n    };\n\n    this.onClick = function () {\n      var classes = undefined,\n          gBCR = undefined,\n          offset = undefined,\n          placePosition = undefined,\n          scrollTop = undefined,\n          styles = undefined;\n\n      if (_this.state.showPicker) {\n        return _this.closePicker();\n      } else {\n        _this.setState({\n          showPicker: true\n        });\n\n        gBCR = _this.refs.dtpbutton.getBoundingClientRect();\n        classes = {\n          \"bootstrap-datetimepicker-widget\": true,\n          \"dropdown-menu\": true\n        };\n        offset = {\n          top: gBCR.top + window.pageYOffset - document.documentElement.clientTop,\n          left: gBCR.left + window.pageXOffset - document.documentElement.clientLeft\n        };\n        offset.top = offset.top + _this.refs.datetimepicker.offsetHeight;\n        scrollTop = window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n        placePosition = _this.props.direction === \"up\" ? \"top\" : _this.props.direction === \"bottom\" ? \"bottom\" : _this.props.direction === \"auto\" ? offset.top + _this.refs.widget.offsetHeight > window.offsetHeight + scrollTop && _this.refs.widget.offsetHeight + _this.refs.datetimepicker.offsetHeight > offset.top ? \"top\" : \"bottom\" : void 0;\n\n        if (placePosition === \"top\") {\n          offset.top = -_this.refs.widget.offsetHeight - _this.clientHeight - 2;\n          classes.top = true;\n          classes.bottom = false;\n          classes[\"pull-right\"] = true;\n        } else {\n          offset.top = 40;\n          classes.top = false;\n          classes.bottom = true;\n          classes[\"pull-right\"] = true;\n        }\n\n        styles = {\n          display: \"block\",\n          position: \"absolute\",\n          top: offset.top,\n          left: \"auto\",\n          right: 40\n        };\n        return _this.setState({\n          widgetStyle: styles,\n          widgetClasses: classes\n        });\n      }\n    };\n\n    this.closePicker = function () {\n      var style = _extends({}, _this.state.widgetStyle);\n\n      style.left = -9999;\n      style.display = \"none\";\n      return _this.setState({\n        showPicker: false,\n        widgetStyle: style\n      });\n    };\n\n    this.size = function () {\n      switch (_this.props.size) {\n        case _ConstantsJs2[\"default\"].SIZE_SMALL:\n          return \"form-group-sm\";\n\n        case _ConstantsJs2[\"default\"].SIZE_LARGE:\n          return \"form-group-lg\";\n      }\n\n      return \"\";\n    };\n\n    this.renderOverlay = function () {\n      var styles = {\n        position: \"fixed\",\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        zIndex: \"999\"\n      };\n\n      if (_this.state.showPicker) {\n        return _react2[\"default\"].createElement(\"div\", {\n          onClick: _this.closePicker,\n          style: styles\n        });\n      } else {\n        return _react2[\"default\"].createElement(\"span\", null);\n      }\n    };\n  }\n\n  _createClass(DateTimeField, [{\n    key: \"render\",\n    value: function render() {\n      return _react2[\"default\"].createElement(\"div\", null, this.renderOverlay(), _react2[\"default\"].createElement(_DateTimePickerJs2[\"default\"], {\n        addDecade: this.addDecade,\n        addHour: this.addHour,\n        addMinute: this.addMinute,\n        addMonth: this.addMonth,\n        addYear: this.addYear,\n        daysOfWeekDisabled: this.props.daysOfWeekDisabled,\n        maxDate: this.props.maxDate,\n        minDate: this.props.minDate,\n        mode: this.props.mode,\n        ref: \"widget\",\n        selectedDate: this.state.selectedDate,\n        setSelectedDate: this.setSelectedDate,\n        setSelectedHour: this.setSelectedHour,\n        setSelectedMinute: this.setSelectedMinute,\n        setViewMonth: this.setViewMonth,\n        setViewYear: this.setViewYear,\n        showDatePicker: this.state.showDatePicker,\n        showTimePicker: this.state.showTimePicker,\n        showToday: this.props.showToday,\n        subtractDecade: this.subtractDecade,\n        subtractHour: this.subtractHour,\n        subtractMinute: this.subtractMinute,\n        subtractMonth: this.subtractMonth,\n        subtractYear: this.subtractYear,\n        togglePeriod: this.togglePeriod,\n        togglePicker: this.togglePicker,\n        viewDate: this.state.viewDate,\n        viewMode: this.props.viewMode,\n        widgetClasses: this.state.widgetClasses,\n        widgetStyle: this.state.widgetStyle\n      }), _react2[\"default\"].createElement(\"div\", {\n        className: \"input-group date \" + this.size(),\n        ref: \"datetimepicker\"\n      }, _react2[\"default\"].createElement(\"input\", _extends({\n        className: \"form-control\",\n        onChange: this.onChange,\n        type: \"text\",\n        value: this.state.inputValue\n      }, this.props.inputProps)), _react2[\"default\"].createElement(\"span\", {\n        className: \"input-group-addon\",\n        onBlur: this.onBlur,\n        onClick: this.onClick,\n        ref: \"dtpbutton\"\n      }, _react2[\"default\"].createElement(\"span\", {\n        className: (0, _classnames2[\"default\"])(\"glyphicon\", this.state.buttonIcon)\n      }))));\n    }\n  }], [{\n    key: \"defaultProps\",\n    value: {\n      dateTime: (0, _moment2[\"default\"])().format(\"x\"),\n      format: \"x\",\n      showToday: true,\n      viewMode: \"days\",\n      daysOfWeekDisabled: [],\n      size: _ConstantsJs2[\"default\"].SIZE_MEDIUM,\n      mode: _ConstantsJs2[\"default\"].MODE_DATETIME,\n      onChange: function onChange(x) {\n        console.log(x);\n      }\n    },\n    enumerable: true\n  }, {\n    key: \"propTypes\",\n    value: {\n      dateTime: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),\n      onChange: _react.PropTypes.func,\n      format: _react.PropTypes.string,\n      inputProps: _react.PropTypes.object,\n      inputFormat: _react.PropTypes.string,\n      defaultText: _react.PropTypes.string,\n      mode: _react.PropTypes.oneOf([_ConstantsJs2[\"default\"].MODE_DATE, _ConstantsJs2[\"default\"].MODE_DATETIME, _ConstantsJs2[\"default\"].MODE_TIME]),\n      minDate: _react.PropTypes.object,\n      maxDate: _react.PropTypes.object,\n      direction: _react.PropTypes.string,\n      showToday: _react.PropTypes.bool,\n      viewMode: _react.PropTypes.string,\n      size: _react.PropTypes.oneOf([_ConstantsJs2[\"default\"].SIZE_SMALL, _ConstantsJs2[\"default\"].SIZE_MEDIUM, _ConstantsJs2[\"default\"].SIZE_LARGE]),\n      daysOfWeekDisabled: _react.PropTypes.arrayOf(_react.PropTypes.number)\n    },\n    enumerable: true\n  }]);\n\n  return DateTimeField;\n}(_react.Component);\n\nexports[\"default\"] = DateTimeField;\nmodule.exports = exports[\"default\"];","map":null,"metadata":{},"sourceType":"script"}