{"ast":null,"code":"import _toConsumableArray from \"/Users/flatironschool/Development/Final_Project/module_4/expense_tracker-front/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/flatironschool/Development/Final_Project/module_4/expense_tracker-front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flatironschool/Development/Final_Project/module_4/expense_tracker-front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flatironschool/Development/Final_Project/module_4/expense_tracker-front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/flatironschool/Development/Final_Project/module_4/expense_tracker-front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flatironschool/Development/Final_Project/module_4/expense_tracker-front/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/flatironschool/Development/Final_Project/module_4/expense_tracker-front/src/HomeView/Containers/UserHome.js\";\nimport React, { Component } from \"react\";\nimport Summary from \"./Summary\";\nimport CategoryContainer from \"./CategoryContainer\";\nimport CategoryDetails from \"../../CategoryView/Containers/CategoryDetails\";\nimport Chart from \"../Components/Chart.js\";\nimport { Route, Switch } from 'react-router-dom';\nimport { Jumbotron } from \"react-bootstrap\";\n\nvar UserHome =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(UserHome, _Component);\n\n  function UserHome() {\n    var _this;\n\n    _classCallCheck(this, UserHome);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UserHome).call(this));\n\n    _this.fetchTransactions = function () {\n      var userId = _this.props.userId;\n      fetch(\"http://localhost:3001/users/\".concat(userId)).then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        // FILTERS CURRENT MONTH TRANSACTIONS ==========================================\n        var currentMonthTransactions = json.transactions.filter(function (transactionObject) {\n          var transactionMonthInt = parseInt(transactionObject.date.split(\"-\")[1]);\n          var presentMonth = new Date().getMonth() + 1;\n          return presentMonth === transactionMonthInt;\n        }); // =============================================================================\n\n        _this.setState({\n          transactions: json.transactions,\n          currentMonthTransactions: currentMonthTransactions\n        });\n      });\n    };\n\n    _this.addTransaction = function (transactionObject) {\n      var allTransactions = [].concat(_toConsumableArray(_this.state.transactions), [transactionObject]); // FILTERS CURRENT MONTH TRANSACTIONS ==========================================\n\n      var currentMonthTransactions = allTransactions.filter(function (transactionObject) {\n        var transactionMonthInt = parseInt(transactionObject.date.split(\"-\")[1]);\n        var presentMonth = new Date().getMonth() + 1;\n        return presentMonth === transactionMonthInt;\n      }); // =============================================================================\n\n      _this.setState({\n        transactions: allTransactions,\n        currentMonthTransactions: currentMonthTransactions\n      });\n    };\n\n    _this.handleDelete = function (transactionObject) {\n      fetch(\"http://localhost:3001/transactions/\".concat(transactionObject.id), {\n        method: \"DELETE\"\n      });\n\n      var copyOfTransactions = _toConsumableArray(_this.state.transactions);\n\n      var index = _this.state.transactions.indexOf(transactionObject);\n\n      copyOfTransactions.splice(index, 1);\n\n      _this.setState({\n        transactions: copyOfTransactions\n      });\n    };\n\n    _this.handleTransactionArrayUpdate = function (updateObject, transactionObject) {\n      var copyOfTransactions = _toConsumableArray(_this.state.transactions);\n\n      var index = copyOfTransactions.indexOf(transactionObject);\n      copyOfTransactions.splice(index, 1, updateObject); // FILTERS CURRENT MONTH TRANSACTIONS ==========================================\n\n      var currentMonthTransactions = copyOfTransactions.filter(function (transactionObject) {\n        var transactionMonthInt = parseInt(transactionObject.date.split(\"-\")[1]);\n        var presentMonth = new Date().getMonth() + 1;\n        return presentMonth === transactionMonthInt;\n      }); // =============================================================================\n\n      _this.setState({\n        transactions: copyOfTransactions,\n        currentMonthTransactions: currentMonthTransactions\n      });\n    };\n\n    _this.state = {\n      transactions: null,\n      currentMonthTransactions: null\n    };\n    return _this;\n  }\n\n  _createClass(UserHome, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchTransactions();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      //GET CURRENT MONTH=============================================================\n      var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n      var currentMonthGetter = function currentMonthGetter() {\n        var index = new Date().getMonth();\n        return months[index];\n      };\n\n      var currentMonth = currentMonthGetter(); //CHART METHODS=================================================================\n\n      var labelGetter = function labelGetter() {\n        var lastThreeMonths = [];\n        var index = new Date().getMonth();\n        lastThreeMonths.push(months[index - 2]);\n        lastThreeMonths.push(months[index - 1]);\n        lastThreeMonths.push(months[index]);\n        return lastThreeMonths;\n      };\n\n      var dataGetter = function dataGetter() {\n        var threeMonthData = [];\n        var currentMonth;\n        var lastMonth;\n        var lastLastMonth; // CURRENT MONTH TOTAL\n\n        if (_this2.state.currentMonthtransactions) {\n          var currentMonthTransactions = _this2.state.currentMonthtransactions.map(function (transaction) {\n            return transaction.amount;\n          });\n\n          var _reducer = function _reducer(accumulator, currentValue) {\n            return accumulator + currentValue;\n          };\n\n          currentMonth = currentMonthTransactions.reduce(_reducer);\n          currentMonth = Math.floor(currentMonth * 100) / 100;\n        } // LAST MONTH TOTAL\n\n\n        if (_this2.state.transactions) {\n          var lastMonthTransactions = _this2.state.transactions.filter(function (transactionObject) {\n            var transactionMonthInt = parseInt(transactionObject.date.split(\"-\")[1]);\n            var lastMonth = new Date().getMonth();\n            return lastMonth === transactionMonthInt;\n          });\n\n          var lastMonthTransactionsAmt = lastMonthTransactions.map(function (transaction) {\n            return transaction.amount;\n          });\n\n          var _reducer2 = function _reducer2(accumulator, currentValue) {\n            return accumulator + currentValue;\n          };\n\n          lastMonth = lastMonthTransactionsAmt.reduce(_reducer2);\n          lastMonth = Math.floor(lastMonth * 100) / 100;\n        } // LAST LAST MONTH TOTAL\n\n\n        var lastLastMonthTransactions = _this2.state.transactions.filter(function (transactionObject) {\n          var transactionMonthInt = parseInt(transactionObject.date.split(\"-\")[1]);\n          var lastLastMonth = new Date().getMonth() - 1;\n          return lastLastMonth === transactionMonthInt;\n        });\n\n        var lastLastMonthTransactionsAmt = lastLastMonthTransactions.map(function (transaction) {\n          return transaction.amount;\n        });\n\n        var reducer = function reducer(accumulator, currentValue) {\n          return accumulator + currentValue;\n        };\n\n        lastLastMonth = lastLastMonthTransactionsAmt.reduce(reducer);\n        lastLastMonth = Math.floor(lastLastMonth * 100) / 100;\n        threeMonthData = [currentMonth, lastMonth, lastLastMonth];\n      }; //==============================================================================\n\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(Route, {\n        path: \"/users/:id/:categoryId\",\n        render: function render(props) {\n          var categoryId = props.match.params.categoryId;\n          var userId = props.match.params.id;\n          var selectedCategory;\n          var userCurrentTransactions;\n          var currentUserObject;\n\n          if (_this2.state.transactions) {\n            currentUserObject = _this2.state.transactions.find(function (transactionObject) {\n              return transactionObject.user.id === parseInt(userId);\n            }).user;\n          }\n\n          if (_this2.state.transactions) {\n            selectedCategory = _this2.state.transactions.filter(function (transactionObject) {\n              return transactionObject.category.id === parseInt(categoryId);\n            });\n            selectedCategory = selectedCategory[0].category;\n            userCurrentTransactions = _this2.state.currentMonthTransactions.filter(function (transactionObject) {\n              return transactionObject.category.id === parseInt(categoryId);\n            });\n          }\n\n          return React.createElement(CategoryDetails, {\n            selectedCategory: selectedCategory,\n            transactions: userCurrentTransactions,\n            userObject: currentUserObject,\n            addTransaction: _this2.addTransaction,\n            handleDelete: _this2.handleDelete,\n            handleTransactionArrayUpdate: _this2.handleTransactionArrayUpdate,\n            currentMonth: currentMonth,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/users/:id\",\n        render: function render(props) {\n          var userId = props.match.params.id;\n          var currentUserObject;\n\n          if (_this2.state.transactions) {\n            currentUserObject = _this2.state.transactions.find(function (transactionObject) {\n              return transactionObject.user.id === parseInt(userId);\n            }).user;\n          }\n\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 204\n            },\n            __self: this\n          }, React.createElement(Jumbotron, {\n            className: \"Jumbotron\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 205\n            },\n            __self: this\n          }, React.createElement(\"h1\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 206\n            },\n            __self: this\n          }, \"Welcome Back \", currentUserObject ? currentUserObject.first_name : null, \"!\")), React.createElement(Summary, {\n            transactions: _this2.state.currentMonthTransactions,\n            currentMonth: currentMonth,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 209\n            },\n            __self: this\n          }), React.createElement(Chart, {\n            label: labelGetter(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 213\n            },\n            __self: this\n          }), React.createElement(CategoryContainer, {\n            transactions: _this2.state.currentMonthTransactions,\n            userObject: currentUserObject,\n            currentMonth: currentMonth,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 216\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return UserHome;\n}(Component);\n\nexport { UserHome as default };","map":{"version":3,"sources":["/Users/flatironschool/Development/Final_Project/module_4/expense_tracker-front/src/HomeView/Containers/UserHome.js"],"names":["React","Component","Summary","CategoryContainer","CategoryDetails","Chart","Route","Switch","Jumbotron","UserHome","fetchTransactions","userId","props","fetch","then","res","json","currentMonthTransactions","transactions","filter","transactionObject","transactionMonthInt","parseInt","date","split","presentMonth","Date","getMonth","setState","addTransaction","allTransactions","state","handleDelete","id","method","copyOfTransactions","index","indexOf","splice","handleTransactionArrayUpdate","updateObject","months","currentMonthGetter","currentMonth","labelGetter","lastThreeMonths","push","dataGetter","threeMonthData","lastMonth","lastLastMonth","currentMonthtransactions","map","transaction","amount","reducer","accumulator","currentValue","reduce","Math","floor","lastMonthTransactions","lastMonthTransactionsAmt","lastLastMonthTransactions","lastLastMonthTransactionsAmt","categoryId","match","params","selectedCategory","userCurrentTransactions","currentUserObject","find","user","category","first_name"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,eAAP,MAA4B,+CAA5B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,SAAQC,KAAR,EAAeC,MAAf,QAA4B,kBAA5B;AACA,SAAQC,SAAR,QAAwB,iBAAxB;;IAEqBC,Q;;;;;AAEnB,sBAAc;AAAA;;AAAA;;AACZ;;AADY,UAYdC,iBAZc,GAYM,YAAM;AACxB,UAAIC,MAAM,GAAG,MAAKC,KAAL,CAAWD,MAAxB;AACAE,MAAAA,KAAK,uCAAgCF,MAAhC,EAAL,CACGG,IADH,CACQ,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OADX,EAEGF,IAFH,CAEQ,UAAAE,IAAI,EAAI;AAEpB;AACQ,YAAIC,wBAAwB,GAAGD,IAAI,CAACE,YAAL,CAAkBC,MAAlB,CAAyB,UAAAC,iBAAiB,EAAI;AAC3E,cAAIC,mBAAmB,GAAGC,QAAQ,CAACF,iBAAiB,CAACG,IAAlB,CAAuBC,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAD,CAAlC;AACA,cAAIC,YAAY,GAAG,IAAIC,IAAJ,GAAWC,QAAX,KAAwB,CAA3C;AACA,iBAAOF,YAAY,KAAKJ,mBAAxB;AACD,SAJ8B,CAA/B,CAHY,CAQpB;;AAEQ,cAAKO,QAAL,CAAc;AACZV,UAAAA,YAAY,EAAEF,IAAI,CAACE,YADP;AAEZD,UAAAA,wBAAwB,EAAEA;AAFd,SAAd;AAID,OAhBH;AAiBD,KA/Ba;;AAAA,UAiCdY,cAjCc,GAiCG,UAACT,iBAAD,EAAuB;AACtC,UAAIU,eAAe,gCAAO,MAAKC,KAAL,CAAWb,YAAlB,IAAgCE,iBAAhC,EAAnB,CADsC,CAG1C;;AACI,UAAIH,wBAAwB,GAAGa,eAAe,CAACX,MAAhB,CAAuB,UAAAC,iBAAiB,EAAI;AACzE,YAAIC,mBAAmB,GAAGC,QAAQ,CAACF,iBAAiB,CAACG,IAAlB,CAAuBC,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAD,CAAlC;AACA,YAAIC,YAAY,GAAG,IAAIC,IAAJ,GAAWC,QAAX,KAAwB,CAA3C;AACA,eAAOF,YAAY,KAAKJ,mBAAxB;AACD,OAJ8B,CAA/B,CAJsC,CAS1C;;AAEI,YAAKO,QAAL,CAAc;AACZV,QAAAA,YAAY,EAAEY,eADF;AAEZb,QAAAA,wBAAwB,EAAEA;AAFd,OAAd;AAID,KAhDa;;AAAA,UAkDde,YAlDc,GAkDC,UAACZ,iBAAD,EAAuB;AACpCP,MAAAA,KAAK,8CAAuCO,iBAAiB,CAACa,EAAzD,GAA+D;AAClEC,QAAAA,MAAM,EAAE;AAD0D,OAA/D,CAAL;;AAIA,UAAIC,kBAAkB,sBAAO,MAAKJ,KAAL,CAAWb,YAAlB,CAAtB;;AACA,UAAIkB,KAAK,GAAG,MAAKL,KAAL,CAAWb,YAAX,CAAwBmB,OAAxB,CAAgCjB,iBAAhC,CAAZ;;AACAe,MAAAA,kBAAkB,CAACG,MAAnB,CAA0BF,KAA1B,EAAiC,CAAjC;;AACA,YAAKR,QAAL,CAAc;AACZV,QAAAA,YAAY,EAAEiB;AADF,OAAd;AAGD,KA7Da;;AAAA,UA+DdI,4BA/Dc,GA+DiB,UAACC,YAAD,EAAepB,iBAAf,EAAqC;AAClE,UAAIe,kBAAkB,sBAAO,MAAKJ,KAAL,CAAWb,YAAlB,CAAtB;;AACA,UAAIkB,KAAK,GAAGD,kBAAkB,CAACE,OAAnB,CAA2BjB,iBAA3B,CAAZ;AACAe,MAAAA,kBAAkB,CAACG,MAAnB,CAA0BF,KAA1B,EAAiC,CAAjC,EAAoCI,YAApC,EAHkE,CAKtE;;AACI,UAAIvB,wBAAwB,GAAGkB,kBAAkB,CAAChB,MAAnB,CAA0B,UAAAC,iBAAiB,EAAI;AAC5E,YAAIC,mBAAmB,GAAGC,QAAQ,CAACF,iBAAiB,CAACG,IAAlB,CAAuBC,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAD,CAAlC;AACA,YAAIC,YAAY,GAAG,IAAIC,IAAJ,GAAWC,QAAX,KAAwB,CAA3C;AACA,eAAOF,YAAY,KAAKJ,mBAAxB;AACD,OAJ8B,CAA/B,CANkE,CAWtE;;AAEI,YAAKO,QAAL,CAAc;AACZV,QAAAA,YAAY,EAAEiB,kBADF;AAEZlB,QAAAA,wBAAwB,EAAEA;AAFd,OAAd;AAID,KAhFa;;AAEZ,UAAKc,KAAL,GAAa;AACXb,MAAAA,YAAY,EAAE,IADH;AAEXD,MAAAA,wBAAwB,EAAE;AAFf,KAAb;AAFY;AAMb;;;;wCAEmB;AAClB,WAAKP,iBAAL;AACD;;;6BAwEQ;AAAA;;AAEX;AACI,UAAI+B,MAAM,GAAK,CAAC,SAAD,EAAW,UAAX,EAAsB,OAAtB,EAA8B,OAA9B,EAAsC,KAAtC,EAA4C,MAA5C,EAAmD,MAAnD,EAA0D,QAA1D,EAAmE,WAAnE,EAA+E,SAA/E,EAAyF,UAAzF,EAAoG,UAApG,CAAf;;AAEA,UAAIC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC7B,YAAIN,KAAK,GAAG,IAAIV,IAAJ,GAAWC,QAAX,EAAZ;AACA,eAAOc,MAAM,CAACL,KAAD,CAAb;AACD,OAHD;;AAKA,UAAIO,YAAY,GAAGD,kBAAkB,EAArC,CAVO,CAYX;;AACI,UAAIE,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtB,YAAIC,eAAe,GAAG,EAAtB;AACA,YAAIT,KAAK,GAAG,IAAIV,IAAJ,GAAWC,QAAX,EAAZ;AACAkB,QAAAA,eAAe,CAACC,IAAhB,CAAqBL,MAAM,CAACL,KAAK,GAAC,CAAP,CAA3B;AACAS,QAAAA,eAAe,CAACC,IAAhB,CAAqBL,MAAM,CAACL,KAAK,GAAC,CAAP,CAA3B;AACAS,QAAAA,eAAe,CAACC,IAAhB,CAAqBL,MAAM,CAACL,KAAD,CAA3B;AACA,eAAOS,eAAP;AACD,OAPD;;AASA,UAAIE,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrB,YAAIC,cAAc,GAAG,EAArB;AACA,YAAIL,YAAJ;AACA,YAAIM,SAAJ;AACA,YAAIC,aAAJ,CAJqB,CAMrB;;AACA,YAAI,MAAI,CAACnB,KAAL,CAAWoB,wBAAf,EAAyC;AACvC,cAAIlC,wBAAwB,GAAG,MAAI,CAACc,KAAL,CAAWoB,wBAAX,CAAoCC,GAApC,CAAwC,UAAAC,WAAW;AAAA,mBAAIA,WAAW,CAACC,MAAhB;AAAA,WAAnD,CAA/B;;AAEA,cAAIC,QAAO,GAAG,SAAVA,QAAU,CAACC,WAAD,EAAcC,YAAd;AAAA,mBAA+BD,WAAW,GAAGC,YAA7C;AAAA,WAAd;;AACAd,UAAAA,YAAY,GAAG1B,wBAAwB,CAACyC,MAAzB,CAAgCH,QAAhC,CAAf;AACAZ,UAAAA,YAAY,GAAGgB,IAAI,CAACC,KAAL,CAAWjB,YAAY,GAAG,GAA1B,IAAiC,GAAhD;AACD,SAboB,CAerB;;;AACA,YAAI,MAAI,CAACZ,KAAL,CAAWb,YAAf,EAA6B;AAC3B,cAAI2C,qBAAqB,GAAG,MAAI,CAAC9B,KAAL,CAAWb,YAAX,CAAwBC,MAAxB,CAA+B,UAAAC,iBAAiB,EAAI;AAC9E,gBAAIC,mBAAmB,GAAGC,QAAQ,CAACF,iBAAiB,CAACG,IAAlB,CAAuBC,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAD,CAAlC;AACA,gBAAIyB,SAAS,GAAG,IAAIvB,IAAJ,GAAWC,QAAX,EAAhB;AACA,mBAAOsB,SAAS,KAAK5B,mBAArB;AACD,WAJ2B,CAA5B;;AAKA,cAAIyC,wBAAwB,GAAGD,qBAAqB,CAACT,GAAtB,CAA0B,UAAAC,WAAW;AAAA,mBAAIA,WAAW,CAACC,MAAhB;AAAA,WAArC,CAA/B;;AAEA,cAAIC,SAAO,GAAG,SAAVA,SAAU,CAACC,WAAD,EAAcC,YAAd;AAAA,mBAA+BD,WAAW,GAAGC,YAA7C;AAAA,WAAd;;AACAR,UAAAA,SAAS,GAAGa,wBAAwB,CAACJ,MAAzB,CAAgCH,SAAhC,CAAZ;AACAN,UAAAA,SAAS,GAAGU,IAAI,CAACC,KAAL,CAAWX,SAAS,GAAG,GAAvB,IAA8B,GAA1C;AACD,SA3BoB,CA6BrB;;;AACA,YAAIc,yBAAyB,GAAG,MAAI,CAAChC,KAAL,CAAWb,YAAX,CAAwBC,MAAxB,CAA+B,UAAAC,iBAAiB,EAAI;AAClF,cAAIC,mBAAmB,GAAGC,QAAQ,CAACF,iBAAiB,CAACG,IAAlB,CAAuBC,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAD,CAAlC;AACA,cAAI0B,aAAa,GAAG,IAAIxB,IAAJ,GAAWC,QAAX,KAAwB,CAA5C;AACA,iBAAOuB,aAAa,KAAK7B,mBAAzB;AACD,SAJ+B,CAAhC;;AAKA,YAAI2C,4BAA4B,GAAGD,yBAAyB,CAACX,GAA1B,CAA8B,UAAAC,WAAW;AAAA,iBAAIA,WAAW,CAACC,MAAhB;AAAA,SAAzC,CAAnC;;AAEA,YAAIC,OAAO,GAAG,SAAVA,OAAU,CAACC,WAAD,EAAcC,YAAd;AAAA,iBAA+BD,WAAW,GAAGC,YAA7C;AAAA,SAAd;;AACAP,QAAAA,aAAa,GAAGc,4BAA4B,CAACN,MAA7B,CAAoCH,OAApC,CAAhB;AACAL,QAAAA,aAAa,GAAGS,IAAI,CAACC,KAAL,CAAWV,aAAa,GAAG,GAA3B,IAAkC,GAAlD;AAEAF,QAAAA,cAAc,GAAG,CAACL,YAAD,EAAeM,SAAf,EAA0BC,aAA1B,CAAjB;AACD,OA1CD,CAtBO,CAkEX;;;AAEI,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,wBAAZ;AAAqC,QAAA,MAAM,EAAE,gBAAAtC,KAAK,EAAI;AACpD,cAAIqD,UAAU,GAAGrD,KAAK,CAACsD,KAAN,CAAYC,MAAZ,CAAmBF,UAApC;AACA,cAAItD,MAAM,GAAGC,KAAK,CAACsD,KAAN,CAAYC,MAAZ,CAAmBlC,EAAhC;AACA,cAAImC,gBAAJ;AACA,cAAIC,uBAAJ;AACA,cAAIC,iBAAJ;;AAEA,cAAI,MAAI,CAACvC,KAAL,CAAWb,YAAf,EAA6B;AAC3BoD,YAAAA,iBAAiB,GAAG,MAAI,CAACvC,KAAL,CAAWb,YAAX,CAAwBqD,IAAxB,CAA6B,UAAAnD,iBAAiB;AAAA,qBAAIA,iBAAiB,CAACoD,IAAlB,CAAuBvC,EAAvB,KAA8BX,QAAQ,CAACX,MAAD,CAA1C;AAAA,aAA9C,EAAkG6D,IAAtH;AACD;;AAED,cAAI,MAAI,CAACzC,KAAL,CAAWb,YAAf,EAA6B;AAC3BkD,YAAAA,gBAAgB,GAAG,MAAI,CAACrC,KAAL,CAAWb,YAAX,CAAwBC,MAAxB,CAA+B,UAAAC,iBAAiB;AAAA,qBAAIA,iBAAiB,CAACqD,QAAlB,CAA2BxC,EAA3B,KAAkCX,QAAQ,CAAC2C,UAAD,CAA9C;AAAA,aAAhD,CAAnB;AACAG,YAAAA,gBAAgB,GAAGA,gBAAgB,CAAC,CAAD,CAAhB,CAAoBK,QAAvC;AAEAJ,YAAAA,uBAAuB,GAAG,MAAI,CAACtC,KAAL,CAAWd,wBAAX,CAAoCE,MAApC,CAA2C,UAAAC,iBAAiB;AAAA,qBAAKA,iBAAiB,CAACqD,QAAlB,CAA2BxC,EAA3B,KAAkCX,QAAQ,CAAC2C,UAAD,CAA/C;AAAA,aAA5D,CAA1B;AACD;;AAED,iBACE,oBAAC,eAAD;AACE,YAAA,gBAAgB,EAAEG,gBADpB;AAEE,YAAA,YAAY,EAAEC,uBAFhB;AAGE,YAAA,UAAU,EAAEC,iBAHd;AAIE,YAAA,cAAc,EAAE,MAAI,CAACzC,cAJvB;AAKE,YAAA,YAAY,EAAE,MAAI,CAACG,YALrB;AAME,YAAA,4BAA4B,EAAE,MAAI,CAACO,4BANrC;AAOE,YAAA,YAAY,EAAEI,YAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD,SA7BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,EAgCA,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,YAAZ;AAAyB,QAAA,MAAM,EAAE,gBAAA/B,KAAK,EAAI;AACxC,cAAID,MAAM,GAAGC,KAAK,CAACsD,KAAN,CAAYC,MAAZ,CAAmBlC,EAAhC;AACA,cAAIqC,iBAAJ;;AAEA,cAAI,MAAI,CAACvC,KAAL,CAAWb,YAAf,EAA6B;AAC3BoD,YAAAA,iBAAiB,GAAG,MAAI,CAACvC,KAAL,CAAWb,YAAX,CAAwBqD,IAAxB,CAA6B,UAAAnD,iBAAiB;AAAA,qBAAIA,iBAAiB,CAACoD,IAAlB,CAAuBvC,EAAvB,KAA8BX,QAAQ,CAACX,MAAD,CAA1C;AAAA,aAA9C,EAAkG6D,IAAtH;AACD;;AAED,iBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACA,oBAAC,SAAD;AAAW,YAAA,SAAS,EAAC,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAkBF,iBAAiB,GAAGA,iBAAiB,CAACI,UAArB,GAAkC,IAArE,MADF,CADA,EAKA,oBAAC,OAAD;AACE,YAAA,YAAY,EAAE,MAAI,CAAC3C,KAAL,CAAWd,wBAD3B;AAEE,YAAA,YAAY,EAAE0B,YAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALA,EASA,oBAAC,KAAD;AACE,YAAA,KAAK,EAAEC,WAAW,EADpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATA,EAYA,oBAAC,iBAAD;AACE,YAAA,YAAY,EAAE,MAAI,CAACb,KAAL,CAAWd,wBAD3B;AAEE,YAAA,UAAU,EAAEqD,iBAFd;AAGE,YAAA,YAAY,EAAE3B,YAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZA,CADF;AAoBD,SA5BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhCA,CADF,CADF;AAkED;;;;EA1NmC1C,S;;SAAjBQ,Q","sourcesContent":["import React, { Component } from \"react\"\nimport Summary from \"./Summary\"\nimport CategoryContainer from \"./CategoryContainer\"\nimport CategoryDetails from \"../../CategoryView/Containers/CategoryDetails\"\nimport Chart from \"../Components/Chart.js\"\nimport {Route, Switch} from 'react-router-dom'\nimport {Jumbotron} from \"react-bootstrap\"\n\nexport default class UserHome extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      transactions: null,\n      currentMonthTransactions: null\n    }\n  }\n\n  componentDidMount() {\n    this.fetchTransactions()\n  }\n\n  fetchTransactions = () => {\n    let userId = this.props.userId\n    fetch(`http://localhost:3001/users/${userId}`)\n      .then(res => res.json())\n      .then(json => {\n\n// FILTERS CURRENT MONTH TRANSACTIONS ==========================================\n        let currentMonthTransactions = json.transactions.filter(transactionObject => {\n          let transactionMonthInt = parseInt(transactionObject.date.split(\"-\")[1])\n          let presentMonth = new Date().getMonth() + 1\n          return presentMonth === transactionMonthInt\n        })\n// =============================================================================\n\n        this.setState({\n          transactions: json.transactions,\n          currentMonthTransactions: currentMonthTransactions\n        })\n      })\n  }\n\n  addTransaction = (transactionObject) => {\n    let allTransactions = [...this.state.transactions, transactionObject]\n\n// FILTERS CURRENT MONTH TRANSACTIONS ==========================================\n    let currentMonthTransactions = allTransactions.filter(transactionObject => {\n      let transactionMonthInt = parseInt(transactionObject.date.split(\"-\")[1])\n      let presentMonth = new Date().getMonth() + 1\n      return presentMonth === transactionMonthInt\n    })\n// =============================================================================\n\n    this.setState({\n      transactions: allTransactions,\n      currentMonthTransactions: currentMonthTransactions\n    })\n  }\n\n  handleDelete = (transactionObject) => {\n    fetch(`http://localhost:3001/transactions/${transactionObject.id}`, {\n      method: \"DELETE\"\n    })\n\n    let copyOfTransactions = [...this.state.transactions]\n    let index = this.state.transactions.indexOf(transactionObject)\n    copyOfTransactions.splice(index, 1)\n    this.setState({\n      transactions: copyOfTransactions\n    })\n  }\n\n  handleTransactionArrayUpdate = (updateObject, transactionObject) => {\n    let copyOfTransactions = [...this.state.transactions]\n    let index = copyOfTransactions.indexOf(transactionObject)\n    copyOfTransactions.splice(index, 1, updateObject)\n\n// FILTERS CURRENT MONTH TRANSACTIONS ==========================================\n    let currentMonthTransactions = copyOfTransactions.filter(transactionObject => {\n      let transactionMonthInt = parseInt(transactionObject.date.split(\"-\")[1])\n      let presentMonth = new Date().getMonth() + 1\n      return presentMonth === transactionMonthInt\n    })\n// =============================================================================\n\n    this.setState({\n      transactions: copyOfTransactions,\n      currentMonthTransactions: currentMonthTransactions\n    })\n  }\n\n  render() {\n\n//GET CURRENT MONTH=============================================================\n    let months    =['January','February','March','April','May','June','July','August','September','October','November','December']\n\n    let currentMonthGetter = () => {\n      let index = new Date().getMonth()\n      return months[index]\n    }\n\n    let currentMonth = currentMonthGetter()\n\n//CHART METHODS=================================================================\n    let labelGetter = () => {\n      let lastThreeMonths = []\n      let index = new Date().getMonth()\n      lastThreeMonths.push(months[index-2])\n      lastThreeMonths.push(months[index-1])\n      lastThreeMonths.push(months[index])\n      return lastThreeMonths\n    }\n\n    let dataGetter = () => {\n      let threeMonthData = []\n      let currentMonth;\n      let lastMonth;\n      let lastLastMonth;\n\n      // CURRENT MONTH TOTAL\n      if (this.state.currentMonthtransactions) {\n        let currentMonthTransactions = this.state.currentMonthtransactions.map(transaction => transaction.amount)\n\n        let reducer = (accumulator, currentValue) => accumulator + currentValue\n        currentMonth = currentMonthTransactions.reduce(reducer)\n        currentMonth = Math.floor(currentMonth * 100) / 100\n      }\n\n      // LAST MONTH TOTAL\n      if (this.state.transactions) {\n        let lastMonthTransactions = this.state.transactions.filter(transactionObject => {\n          let transactionMonthInt = parseInt(transactionObject.date.split(\"-\")[1])\n          let lastMonth = new Date().getMonth()\n          return lastMonth === transactionMonthInt\n        })\n        let lastMonthTransactionsAmt = lastMonthTransactions.map(transaction => transaction.amount)\n\n        let reducer = (accumulator, currentValue) => accumulator + currentValue\n        lastMonth = lastMonthTransactionsAmt.reduce(reducer)\n        lastMonth = Math.floor(lastMonth * 100) / 100\n      }\n\n      // LAST LAST MONTH TOTAL\n      let lastLastMonthTransactions = this.state.transactions.filter(transactionObject => {\n        let transactionMonthInt = parseInt(transactionObject.date.split(\"-\")[1])\n        let lastLastMonth = new Date().getMonth() - 1\n        return lastLastMonth === transactionMonthInt\n      })\n      let lastLastMonthTransactionsAmt = lastLastMonthTransactions.map(transaction => transaction.amount)\n\n      let reducer = (accumulator, currentValue) => accumulator + currentValue\n      lastLastMonth = lastLastMonthTransactionsAmt.reduce(reducer)\n      lastLastMonth = Math.floor(lastLastMonth * 100) / 100\n\n      threeMonthData = [currentMonth, lastMonth, lastLastMonth]\n    }\n\n//==============================================================================\n\n    return (\n      <div>\n        <Switch>\n        <Route path='/users/:id/:categoryId' render={props => {\n          let categoryId = props.match.params.categoryId\n          let userId = props.match.params.id\n          let selectedCategory;\n          let userCurrentTransactions;\n          let currentUserObject;\n\n          if (this.state.transactions) {\n            currentUserObject = this.state.transactions.find(transactionObject => transactionObject.user.id === parseInt(userId)).user\n          }\n\n          if (this.state.transactions) {\n            selectedCategory = this.state.transactions.filter(transactionObject => transactionObject.category.id === parseInt(categoryId))\n            selectedCategory = selectedCategory[0].category\n\n            userCurrentTransactions = this.state.currentMonthTransactions.filter(transactionObject => (transactionObject.category.id === parseInt(categoryId)))\n          }\n\n          return (\n            <CategoryDetails\n              selectedCategory={selectedCategory}\n              transactions={userCurrentTransactions}\n              userObject={currentUserObject}\n              addTransaction={this.addTransaction}\n              handleDelete={this.handleDelete}\n              handleTransactionArrayUpdate={this.handleTransactionArrayUpdate}\n              currentMonth={currentMonth}\n            />\n          )\n        }} />\n\n        <Route path='/users/:id' render={props => {\n          let userId = props.match.params.id\n          let currentUserObject;\n\n          if (this.state.transactions) {\n            currentUserObject = this.state.transactions.find(transactionObject => transactionObject.user.id === parseInt(userId)).user\n          }\n\n          return (\n            <div>\n            <Jumbotron className=\"Jumbotron\">\n              <h1>Welcome Back {currentUserObject ? currentUserObject.first_name : null}!</h1>\n            </Jumbotron>\n\n            <Summary\n              transactions={this.state.currentMonthTransactions}\n              currentMonth={currentMonth}\n            />\n            <Chart\n              label={labelGetter()}\n            />\n            <CategoryContainer\n              transactions={this.state.currentMonthTransactions}\n              userObject={currentUserObject}\n              currentMonth={currentMonth}\n            />\n            </div>\n          )\n        }} />\n        </Switch>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}